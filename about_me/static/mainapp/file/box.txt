def add_edge(i1,j1,i2,j2,maze_map):
    global a
    if row >1:
        if (maze_map[i1][j1] != 'W') and (maze_map[i2][j2] != 'W'):
            a[i1][j1][i2][j2] = 1
            a[i2][j2][i1][j1] = 1
    else:
        if (maze_map[0][j1] != 'W') and (maze_map[0][j2] != 'W'):
                a[0][j1][0][j2] = 1
                a[0][j2][0][j1] = 1

def fill_matrix(maze_map):
    for i in range(row):
        for j in range(column)   :
            if i != row-1:
                add_edge(i,j,i+1,j,maze_map)
            if i != 0:
                add_edge(i,j,i-1,j,maze_map)
            if j != column-1:
                add_edge(i,j,i,j+1,maze_map)
            if j != 0:
                add_edge(i,j,i,j-1,maze_map)
def bfs(i,j):
    global parent
    parent = [[-1]*column for i in range(row)]
    dist = [[-1]*column for i in range(row)]
    dist[i][j] = 0
    s = [(i,j)]
    while len(s) != 0:
        v = s.pop(0)
        for i2 in range(row):
            for j2 in range(column):
                if a[v[0]][v[1]][i2][j2] == 1 and dist[i2][j2] == -1:
                    s.append((i2,j2))
                    dist[i2][j2] = dist[v[0]][v[1]] + 1
                    parent[i2][j2] = v

def print_path(i,j):
    global parent
    print(parent)
    if parent[i][j] != -1:
        path = [(i,j)]
        cur = parent[i][j]
        while cur != -1:
            path.append(cur)
            cur = parent[cur[0]][cur[1]]
        path.reverse()
        print(path)
        res = ''
        for index in range(len(path)-1):
            cur = path[index]
            next = path[index+1]
            if next[0]>cur[0]:
                res += 'D'
            elif next[0]<cur[0]:
                res += 'U'
            elif next[1]>cur[1]:
                res += 'R'
            else:
                res += 'L'
        return res

def checkio(field_map):
    global a
    global visited
    global parent
    global column
    global row
    column = len(field_map[0])
    row = len(field_map)
    a = [[[[0]*column for i in range(row)] for i in range(column)] for i in range(row)]
    parent = [[-1]*column for i in range(row)]
    fill_matrix(field_map)
    bfs(0,0)
    path_one = print_path(row-1,column-1)
    len_one = len(path_one)*2
    a1 = ''
    cord_box_X_st = -1
    cord_box_Y_st = -1
    for i in range(row):
        for j in range(column):
            if field_map[i][j] == 'B':
                if a1 == '':
                    a1 = print_path(i,j)
                    cord_box_X_st = i
                    cord_box_Y_st = j
                else:
                    if len(print_path(i,j))<len(a1):
                        a1 = print_path(i,j)
                        cord_box_X_st = i
                        cord_box_Y_st = j
    bfs(row-1,column-1)
    print(parent)
    a3 = ''
    cord_box_X_fin = -1
    cord_box_Y_fin = -1
    for i in range(row):
        for j in range(column):
            if field_map[i][j] == 'B':
                if a3 == '':
                    a3 = print_path(i,j)
                    cord_box_X_fin = i
                    cord_box_Y_fin = j
                else:
                    if len(print_path(i,j))<len(a3):
                        a3 = print_path(i,j)
                        cord_box_X_fin = i
                        cord_box_Y_fin = j
    q3 = ''
    for i in a3:
        if i == 'L':
            q3+='R'
        if i == 'R':
            q3+='L'
        if i == 'U':
            q3+='D'
        if i == 'D':
            q3+='U'
    q3 = q3[::-1]
    bfs(cord_box_X_st,cord_box_Y_st)
    a2 = print_path(cord_box_X_fin,cord_box_Y_fin)
    if len(path_one)*2 <= (len(a1)*2 + len(a2) + len(a3)*2 + 2):
        return path_one
    else:
        return a1+'B'+a2+'B'+q3